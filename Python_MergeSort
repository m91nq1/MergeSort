even_array = [num for num in range(12, 0, -2)]

# Generating the array of odd numbers from 20 to 40
odd_array = [num for num in range(21, 41, 2)]

print("Array of even numbers:", even_array)
print("Array of odd numbers:", odd_array)

def mergeSort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]
        mergeSort(L)
        mergeSort(R)

        i = j = k = 0

        while i < len(L) and j < len(R):
            if L[i] <= R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1

        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1

        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1


even_array = [num for num in range(12, 0, -2)]
odd_array = [num for num in range(21, 41, 2)]

mergeSort(even_array)
mergeSort(odd_array)

print("Array of even numbers:", even_array)
print("Array of odd numbers:", odd_array)

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class SinglyLinkedList:
    def __init__(self):
        self.head = None

    def print_linked_list(self, head):
        current = head
        while current:
            print(current.data, end=" ")
            current = current.next
        print()

    def insert_at_tail(self, head, data):
        new_node = Node(data)
        if head is None:
            return new_node

        current = head
        while current.next:
            current = current.next

        current.next = new_node
        return head


merged_sorted_array = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]
sll = SinglyLinkedList()
head = Node(merged_sorted_array[0])
current = head
for value in merged_sorted_array[1:]:
    current.next = Node(value)
    current = current.next

print("Linked list in the same order as the input:")
sll.print_linked_list(head)

def print_reverse(head):
    if head is None:
        return
    print_reverse(head.next)
    print(head.data, end=" ")

print("Linked list in a reverse order of the input:")
print_reverse(head)
print()


head = sll.insert_at_tail(head, 45)
print("Linked list after inserting 45:")
sll.print_linked_list(head)
